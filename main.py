# Thesaurus

import pandas as pd
from datetime import datetime, timedelta, time
import os
import requests
from requests.exceptions import RequestException
import matplotlib.pyplot as plt
from dotenv import load_dotenv
import logging


import holidays
from datetime import date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
log_dir = os.path.join(os.getcwd(), "log")
os.makedirs(log_dir, exist_ok=True)

# –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
log_file = os.path.join(log_dir, "ruonia_log.txt")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    encoding="utf-8"
)

logger = logging.getLogger(__name__)


def is_russian_workday(check_date=None):
    if check_date is None:
        check_date = date.today()

    ru_holidays = holidays.Russia()
    return check_date.weekday() < 5 and check_date not in ru_holidays


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–µ–∫ –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, 
def check_if_need_new_rec(FILENAME="ruonia_data.xlsx"):
    try:
        today = datetime.today().date()
        end_date = today.strftime("%d.%m.%Y")
        start_date = "11.01.2010"
        from_dt = datetime.strptime(start_date, "%d.%m.%Y").strftime("%m/%d/%Y")
        to_dt = today.strftime("%m/%d/%Y")

        if os.path.exists(FILENAME):
            try:
                local_df = pd.read_excel(FILENAME)
                local_df["–î–∞—Ç–∞"] = pd.to_datetime(local_df["–î–∞—Ç–∞"], dayfirst=True)
                last_date = local_df["–î–∞—Ç–∞"].max().date()
                from_date = local_df["–î–∞—Ç–∞"].min().date()

                logger.info(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω. –° {from_date} –ø–æ {last_date}")

                if not is_russian_workday():
                    logger.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                    return 0

                if last_date.strftime('%d.%m.%Y') == today.strftime('%d.%m.%Y') or (
                    last_date.strftime('%d.%m.%Y') == (today - timedelta(days=1)).strftime('%d.%m.%Y') and
                    datetime.now().time() < time(14, 0)
                ):
                    logger.info("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                    return 0
                else:
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–Ω–æ–≤–æ.")
        else:
            logger.info(f"–§–∞–π–ª {FILENAME} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å {start_date} –ø–æ {end_date}.")

        url = f"https://cbr.ru/Queries/UniDbQuery/DownloadExcel/125022?Posted=True&From={start_date}&To={end_date}&I1=true&M1=true&M3=true&M6=true&FromDate={from_dt}&ToDate={to_dt}"
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ —Å—Å—ã–ª–∫–µ: {url}")

        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return -1

        with open(FILENAME, "wb") as f:
            f.write(response.content)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {FILENAME}")

        return 1

    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–∞–π—Ç–∞ –¶–ë: {e}")
        return -1
    except Exception as e:
        logger.exception(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return -2



# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤, –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ 
def analitics(FILENAME="ruonia_data.xlsx"):
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ PNG —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    today_str = datetime.today().strftime("%Y-%m-%d")
    base_filename = f"ruonia_trend_{today_str}"
    ext = ".png"

    # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    output_dir = os.path.join(os.getcwd(), "src")
    os.makedirs(output_dir, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    version = 1
    output_path = os.path.join(output_dir, base_filename + ext)
    while os.path.exists(output_path):
        version += 1
        output_path = os.path.join(output_dir, f"{base_filename}_v{version}{ext}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_excel(FILENAME)
        df = df.rename(columns={
            "–ò–Ω–¥–µ–∫—Å": "RUONIA",
            "1 –º–µ—Å—è—Ü": "1 –º–µ—Å",
            "3 –º–µ—Å—è—Ü–∞": "3 –º–µ—Å",
            "6 –º–µ—Å—è—Ü–µ–≤": "6 –º–µ—Å"
        })

        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True)
        df = df.dropna(subset=["RUONIA", "1 –º–µ—Å", "3 –º–µ—Å", "6 –º–µ—Å"])
        df = df.sort_values("–î–∞—Ç–∞")

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(14, 7))
        plt.plot(df["–î–∞—Ç–∞"], df["RUONIA"], label="RUONIA (overnight)", linewidth=2)
        plt.plot(df["–î–∞—Ç–∞"], df["1 –º–µ—Å"], label="RUONIA 1 –º–µ—Å", linestyle="--")
        plt.plot(df["–î–∞—Ç–∞"], df["3 –º–µ—Å"], label="RUONIA 3 –º–µ—Å", linestyle="-.")
        plt.plot(df["–î–∞—Ç–∞"], df["6 –º–µ—Å"], label="RUONIA 6 –º–µ—Å", linestyle=":")

        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ RUONIA –∏ —Å—Ä–æ—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫", fontsize=14)
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–°—Ç–∞–≤–∫–∞ (%)")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(output_path)
        plt.close()

        logger.info(f"üìà –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        return output_path

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None
    
#–ø—Ä–æ–≤–µ—Ç—Å–∏ –∞–Ω–∞–ª–∏–∑ –†–£–û–ù–ò–ò 
def make_analyze_ruonia(filepath="ruonia_data.xlsx"):
    try:
        df = pd.read_excel(filepath)
        df = df.rename(columns={
            "–ò–Ω–¥–µ–∫—Å": "RUONIA",
            "1 –º–µ—Å—è—Ü": "1 –º–µ—Å",
            "3 –º–µ—Å—è—Ü–∞": "3 –º–µ—Å",
            "6 –º–µ—Å—è—Ü–µ–≤": "6 –º–µ—Å"
        })
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True)
        df = df.sort_values("–î–∞—Ç–∞")

        last_30 = df.tail(30)
        last_15 = last_30.tail(15)
        last_10 = last_30.tail(10)

        latest_date = last_10["–î–∞—Ç–∞"].iloc[-1].strftime("%d.%m.%Y")
        previous_date = last_10["–î–∞—Ç–∞"].iloc[-2].strftime("%d.%m.%Y")

        indicators = ["RUONIA", "1 –º–µ—Å", "3 –º–µ—Å", "6 –º–µ—Å"]
        full_text = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {latest_date}\n"

        for col in indicators:
            latest = last_10[col].iloc[-1]
            previous = last_10[col].iloc[-2]

            delta_1 = latest - previous
            delta_10 = last_10[col].iloc[-1] - last_10[col].iloc[0]
            delta_15 = last_15[col].iloc[-1] - last_15[col].iloc[0]
            delta_30 = last_30[col].iloc[-1] - last_30[col].iloc[0]

            mean_10 = last_10[col].mean()
            mean_15 = last_15[col].mean()
            mean_30 = last_30[col].mean()

            if delta_10 > 0 and delta_15 > 0 and delta_30 > 0:
                trend = "üìà –ø–ª–∞–≤–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
            elif delta_10 < 0 and delta_15 < 0 and delta_30 < 0:
                trend = "üìâ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ"
            else:
                trend = "üìä –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"

            full_text += (
                f"\nüìå **{col}**\n"
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {latest:.4f}\n"
                f"‚Ä¢ –í—á–µ—Ä–∞ ({previous_date}): {previous:.4f}\n"
                f"‚Ä¢ Œî –∑–∞ –¥–µ–Ω—å: {delta_1:+.4f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 10 –¥–Ω–µ–π: {mean_10:.4f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 15 –¥–Ω–µ–π: {mean_15:.4f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π: {mean_30:.4f}\n"
                f"‚Ä¢ –†–æ—Å—Ç –∑–∞ 10 –¥–Ω–µ–π: {delta_10:+.4f}\n"
                f"‚Ä¢ –†–æ—Å—Ç –∑–∞ 15 –¥–Ω–µ–π: {delta_15:+.4f}\n"
                f"‚Ä¢ –†–æ—Å—Ç –∑–∞ 30 –¥–Ω–µ–π: {delta_30:+.4f}\n"
                f"‚Ä¢ –¢—Ä–µ–Ω–¥: {trend}\n"
            )

        logger.info("üßæ –ê–Ω–∞–ª–∏–∑ RUONIA —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        logger.debug(f"\n{full_text}")
        return full_text

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ RUONIA: {e}")
        return None


def send_info_ruonia(client, recipients):
    folder_path = os.path.join(os.getcwd(), "src")
    base_name = "ruonia_trend_"
    extension = ".png"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    matching_files = [
        f for f in os.listdir(folder_path)
        if f.startswith(base_name) and f.endswith(extension)
    ] if os.path.exists(folder_path) else []

    if matching_files:
        matching_files.sort(reverse=True)
        latest_file = os.path.join(folder_path, matching_files[0])
        logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: {latest_file}")
    else:
        logger.warning("üìÇ –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é analitics()...")
        latest_file = analitics()

    if not latest_file or not os.path.exists(latest_file):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ RUONIA.")
        return
    analysis = make_analyze_ruonia()

    for chat_id in recipients:
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Ç: {chat_id}")
            client.send_photo(
                chat_id,
                photo=latest_file,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ RUONIA –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
            )
            if analysis:
                client.send_message(chat_id, analysis)
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        except Exception as e:
            logger.exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")

# https://cbr.ru/Queries/UniDbQuery/DownloadExcel/125022?Posted=True&From=11.01.2010&To=30.04.2025&I1=true&M1=true&M3=true&M6=true&FromDate=01%2F11%2F2010&ToDate=04%2F30%2F2025


#################################### –í–µ—Ä–Ω—É—Ç—å ######
# check_if_need_new_rec()

# analitics()  # –õ–∏–±–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å 
#################################### –í–µ—Ä–Ω—É—Ç—å ######


###### –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ####
import subprocess
import os
import sys

def check_git_update(commit_file="log/current_commit.txt"):
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ log —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(commit_file), exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç —Å origin
        subprocess.run(["git", "fetch"], check=True)
        new_commit = subprocess.check_output(
            ["git", "rev-parse", "origin/main"], text=True
        ).strip()

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
        if not os.path.exists(commit_file):
            with open(commit_file, "w") as f:
                f.write(new_commit)
            logger.info(f"üìÑ –§–∞–π–ª {commit_file} —Å–æ–∑–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–∏—Ç: {new_commit}")
            return None  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

        # –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç
        with open(commit_file, "r") as f:
            last_commit = f.read().strip()

        if new_commit != last_commit:
            logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç: {new_commit}")
            return new_commit
        else:
            logger.info("‚úÖ –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return None

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Git:")
        return None


def update_and_restart(new_commit, commit_file="log/current_commit.txt"):
    try:
        subprocess.run(["git", "pull"], check=True)

        with open(commit_file, "w") as f:
            f.write(new_commit)

        logger.info("‚ôªÔ∏è –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        os.execv(sys.executable, ['python'] + sys.argv)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:")



commit_file = "log/current_commit.txt"
new_commit = check_git_update(commit_file)
if new_commit:
    update_and_restart(new_commit, commit_file)


######

load_dotenv()  

api_hash = os.getenv('api_hash')
for_whom = os.getenv('for_whom')
api_id = os.getenv('api_id')
bot_token = os.getenv('bot_token')

recipients_raw = os.getenv("for_whom_list", "")
recipients = [r.strip() for r in recipients_raw.split(",") if r.strip()]
if not recipients:
    raise ValueError("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –£–±–µ–¥–∏—Å—å, —á—Ç–æ for_whom_list –∑–∞–¥–∞–Ω –≤ .env")




from pyrogram import Client, idle

# #################  –≤–µ—Ä–Ω—É—Ç—å 
# client = Client(name='me_client', api_id=api_id, api_hash=api_hash, bot_token = bot_token )
# # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
# client.start()

        


# check_if_need_new_rec()
# send_info_ruonia(client, recipients)



# # idle()

# # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
# client.stop()

# #################### –≤–µ—Ä–Ω—É—Ç—å 







