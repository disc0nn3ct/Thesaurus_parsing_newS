# Thesaurus

import pandas as pd
from datetime import datetime, timedelta, time
import os
import requests
from requests.exceptions import RequestException
import matplotlib.pyplot as plt
from dotenv import load_dotenv


import holidays
from datetime import date

def is_russian_workday(check_date=None):
    if check_date is None:
        check_date = date.today()

    ru_holidays = holidays.Russia()
    return check_date.weekday() < 5 and check_date not in ru_holidays


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–µ–∫ –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, 
def check_if_need_new_rec(FILENAME="ruonia_data.xlsx"):
    try:
        # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        today = datetime.today().date()
        end_date = today.strftime("%d.%m.%Y")
        start_date = "11.01.2010"

        from_dt = datetime.strptime(start_date, "%d.%m.%Y").strftime("%m/%d/%Y")
        to_dt = today.strftime("%m/%d/%Y")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(FILENAME):
            try:
                local_df = pd.read_excel(FILENAME)
                local_df["–î–∞—Ç–∞"] = pd.to_datetime(local_df["–î–∞—Ç–∞"], dayfirst=True)
                last_date = local_df["–î–∞—Ç–∞"].max().date()
                from_date = local_df["–î–∞—Ç–∞"].min().date()
                print(f"–§–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {from_date.strftime('%d.%m.%Y')}, –∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–∞–π–ª–µ: {last_date.strftime('%d.%m.%Y')}")
                # print("================== ", last_date.strftime('%d.%m.%Y'), " ================= ", end_date, " ======= ", today.strftime('%d.%m.%Y'))
                if not is_russian_workday():
                        print("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ –≤ –†–§ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RUONIA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                        return 0 # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π
                if last_date.strftime('%d.%m.%Y') == today.strftime('%d.%m.%Y') or ( last_date.strftime('%d.%m.%Y') == ((today-timedelta(days=1)).strftime('%d.%m.%Y')) and datetime.now().time() < time(14, 0)): # –ò –¥–∞—Ç–∞ - 1 –µ—Å–ª–∏ —á–∞—Å–æ–≤ –º–µ–Ω—å—à–µ 14 
                    print("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                    return 0
                else:
                    print("–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –¥–∞—Ç–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                print("–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–æ–≤–æ.")
        else:
            print(f"–§–∞–π–ª {FILENAME} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å {start_date} –ø–æ {end_date}.")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        url = f"https://cbr.ru/Queries/UniDbQuery/DownloadExcel/125022?Posted=True&From={start_date}&To={end_date}&I1=true&M1=true&M3=true&M6=true&FromDate={from_dt}&ToDate={to_dt}"



        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        print(f"–°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¶–ë –†–§ –ø–æ —Å—Å—ã–ª–∫–µ: {url}")
        response = requests.get(url)

        try:
            response = requests.get(url, timeout=10)  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
            response.raise_for_status()  # –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ ‚â† 200
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª–∞ —Å —Å–∞–π—Ç–∞ –¶–ë: {e}")
            return -1
    
        with open(FILENAME, "wb") as f:
            f.write(response.content)
            print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {FILENAME}")
            f.close()
        return 1

    except RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –¶–ë: {e}")
        return -1
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return -2



# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤, –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ 
def analitics(FILENAME="ruonia_data.xlsx"):
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ PNG —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    today_str = datetime.today().strftime("%Y-%m-%d")
    base_filename = f"ruonia_trend_{today_str}"
    ext = ".png"

    # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    output_dir = os.path.join(os.getcwd(), "src")
    os.makedirs(output_dir, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    version = 1
    output_path = os.path.join(output_dir, base_filename + ext)
    while os.path.exists(output_path):
        version += 1
        output_path = os.path.join(output_dir, f"{base_filename}_v{version}{ext}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_excel(FILENAME)
        df = df.rename(columns={
            "–ò–Ω–¥–µ–∫—Å": "RUONIA",
            "1 –º–µ—Å—è—Ü": "1 –º–µ—Å",
            "3 –º–µ—Å—è—Ü–∞": "3 –º–µ—Å",
            "6 –º–µ—Å—è—Ü–µ–≤": "6 –º–µ—Å"
        })

        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True)
        df = df.dropna(subset=["RUONIA", "1 –º–µ—Å", "3 –º–µ—Å", "6 –º–µ—Å"])
        df = df.sort_values("–î–∞—Ç–∞")

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(14, 7))
        plt.plot(df["–î–∞—Ç–∞"], df["RUONIA"], label="RUONIA (overnight)", linewidth=2)
        plt.plot(df["–î–∞—Ç–∞"], df["1 –º–µ—Å"], label="RUONIA 1 –º–µ—Å", linestyle="--")
        plt.plot(df["–î–∞—Ç–∞"], df["3 –º–µ—Å"], label="RUONIA 3 –º–µ—Å", linestyle="-.")
        plt.plot(df["–î–∞—Ç–∞"], df["6 –º–µ—Å"], label="RUONIA 6 –º–µ—Å", linestyle=":")

        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ RUONIA –∏ —Å—Ä–æ—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫", fontsize=14)
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–°—Ç–∞–≤–∫–∞ (%)")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(output_path)
        plt.close()

        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        return output_path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

#–ø—Ä–æ–≤–µ—Ç—Å–∏ –∞–Ω–∞–ª–∏–∑ –†–£–û–ù–ò–ò 
def make_analyze_ruonia(filepath="ruonia_data.xlsx"):
    try:
        df = pd.read_excel(filepath)
        df = df.rename(columns={
            "–ò–Ω–¥–µ–∫—Å": "RUONIA",
            "1 –º–µ—Å—è—Ü": "1 –º–µ—Å",
            "3 –º–µ—Å—è—Ü–∞": "3 –º–µ—Å",
            "6 –º–µ—Å—è—Ü–µ–≤": "6 –º–µ—Å"
        })
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True)
        df = df.sort_values("–î–∞—Ç–∞")

        last_30 = df.tail(30)
        last_15 = last_30.tail(15)
        last_10 = last_30.tail(10)

        latest_date = last_10["–î–∞—Ç–∞"].iloc[-1].strftime("%d.%m.%Y")
        previous_date = last_10["–î–∞—Ç–∞"].iloc[-2].strftime("%d.%m.%Y")

        indicators = ["RUONIA", "1 –º–µ—Å", "3 –º–µ—Å", "6 –º–µ—Å"]
        full_text = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {latest_date}\n"

        for col in indicators:
            latest = last_10[col].iloc[-1]
            previous = last_10[col].iloc[-2]

            delta_1 = latest - previous
            delta_10 = last_10[col].iloc[-1] - last_10[col].iloc[0]
            delta_15 = last_15[col].iloc[-1] - last_15[col].iloc[0]
            delta_30 = last_30[col].iloc[-1] - last_30[col].iloc[0]

            mean_10 = last_10[col].mean()
            mean_15 = last_15[col].mean()
            mean_30 = last_30[col].mean()

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if delta_10 > 0 and delta_15 > 0 and delta_30 > 0:
                trend = "üìà –ø–ª–∞–≤–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
            elif delta_10 < 0 and delta_15 < 0 and delta_30 < 0:
                trend = "üìâ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ"
            else:
                trend = "üìä –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –æ—Ç—á—ë—Ç–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
            full_text += (
                f"\nüìå **{col}**\n"
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {latest:.4f}\n"
                f"‚Ä¢ –í—á–µ—Ä–∞ ({previous_date}): {previous:.4f}\n"
                f"‚Ä¢ Œî –∑–∞ –¥–µ–Ω—å: {delta_1:+.4f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 10 –¥–Ω–µ–π: {mean_10:.4f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 15 –¥–Ω–µ–π: {mean_15:.4f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π: {mean_30:.4f}\n"
                f"‚Ä¢ –†–æ—Å—Ç –∑–∞ 10 –¥–Ω–µ–π: {delta_10:+.4f}\n"
                f"‚Ä¢ –†–æ—Å—Ç –∑–∞ 15 –¥–Ω–µ–π: {delta_15:+.4f}\n"
                f"‚Ä¢ –†–æ—Å—Ç –∑–∞ 30 –¥–Ω–µ–π: {delta_30:+.4f}\n"
                f"‚Ä¢ –¢—Ä–µ–Ω–¥: {trend}\n"
            )

        print(full_text)
        return full_text

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ RUONIA: {e}")
        return None

def send_info_ruonia(client, recipients):

    folder_path = os.path.join(os.getcwd(), "src")
    base_name = "ruonia_trend_"
    extension = ".png"
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å –Ω—É–∂–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
    matching_files = [
        f for f in os.listdir(folder_path)
        if f.startswith(base_name) and f.endswith(extension)
    ]

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–µ—Ä—Å–∏—è (–∏–ª–∏ –¥–∞—Ç–∞) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞
    if matching_files:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–¥—É—Ç –ø–æ–∑–∂–µ
        matching_files.sort(reverse=True)
        latest_file = os.path.join(folder_path, matching_files[0])
    else:
        latest_file = None

    for chat_id in recipients:
        print("========================= ", chat_id )
        client.send_photo(
            chat_id,
            photo=latest_file,
            caption="üìà –ì—Ä–∞—Ñ–∏–∫ RUONIA –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è" + latest_file
        )
        client.send_message(chat_id, make_analyze_ruonia())









# https://cbr.ru/Queries/UniDbQuery/DownloadExcel/125022?Posted=True&From=11.01.2010&To=30.04.2025&I1=true&M1=true&M3=true&M6=true&FromDate=01%2F11%2F2010&ToDate=04%2F30%2F2025


#################################### –í–µ—Ä–Ω—É—Ç—å ######
check_if_need_new_rec()

# analitics()
#################################### –í–µ—Ä–Ω—É—Ç—å ######


load_dotenv()  

api_hash = os.getenv('api_hash')
for_whom = os.getenv('for_whom')
api_id = os.getenv('api_id')
bot_token = os.getenv('bot_token')

recipients_raw = os.getenv("for_whom_list", "")




from pyrogram import Client


client = Client(name='me_client', api_id=api_id, api_hash=api_hash, bot_token = bot_token )
# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
client.start()


recipients = [r.strip() for r in recipients_raw.split(",") if r.strip()]

if not recipients:
    raise ValueError("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –£–±–µ–¥–∏—Å—å, —á—Ç–æ for_whom_list –∑–∞–¥–∞–Ω –≤ .env")
        
send_info_ruonia(client, recipients)






# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
client.stop()


#### –õ–∏–±–æ —Ç–∞–∫ ### 
# with Client(name='me_client', api_id=api_id, api_hash=api_hash, bot_token=bot_token) as client:
#     client.send_message(for_whom, "üìä –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Pyrogram-–±–æ—Ç–∞.")


####

# client.send_message(for_whom, "üìä –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Pyrogram-–±–æ—Ç–∞.")






