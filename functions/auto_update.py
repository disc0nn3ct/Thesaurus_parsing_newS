import os
import subprocess
import sys
import logging

logger = logging.getLogger(__name__)  


# def check_git_update(commit_file="log/current_commit.txt"):
def check_git_update(commit_file="current_commit.txt"):
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Å–∫—Ä–∏–ø—Ç
        project_root = os.path.dirname(os.path.abspath(sys.argv[0]))
        os.chdir(project_root)
        logger.info(f"üìÅ –ü–µ—Ä–µ—à–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")

        os.makedirs(os.path.dirname(commit_file), exist_ok=True)
        subprocess.run(["git", "fetch"], check=True)
        new_commit = subprocess.check_output(
            ["git", "rev-parse", "origin/main"], text=True
        ).strip()

        if not os.path.exists(commit_file):
            with open(commit_file, "w") as f:
                f.write(new_commit)
            logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {commit_file}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: {new_commit}")
            return None

        with open(commit_file, "r") as f:
            last_commit = f.read().strip()

        if new_commit != last_commit:
            logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new_commit}")
            return new_commit
        else:
            logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
            return None

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Git:")
        return None


# # def update_and_restart(new_commit, commit_file="log/current_commit.txt"):
# def update_and_restart(new_commit, commit_file="current_commit.txt"):

#     try:
#         # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
#         script_dir = os.path.dirname(os.path.abspath(__file__))
#         os.chdir(script_dir)
        
#         subprocess.run(["git", "pull", "origin", "main"], check=True)
#         with open(commit_file, "w") as f:
#             f.write(new_commit)

#         logger.info("‚ôªÔ∏è –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
#         os.execv(sys.executable, [sys.executable] + sys.argv)

#     except Exception as e:
#         logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:")

def update_and_restart(new_commit, commit_file):
    try:
        subprocess.run(["git", "pull", "origin", "main"], check=True)

        with open(commit_file, "w") as f:
            f.write(new_commit)

        logger.info("‚ôªÔ∏è –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        os.execv(sys.executable, [sys.executable] + sys.argv)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:")





def check_and_restart_if_updated(commit_file="log/current_commit.txt"):
# def check_and_restart_if_updated(commit_file="log/current_commit.txt"):
    new_commit = check_git_update(commit_file)
    if new_commit:
        update_and_restart(new_commit, commit_file)



# def check_and_restart_if_updated(commit_file="log/current_commit.txt"):
#     project_root = os.path.dirname(os.path.abspath(sys.argv[0]))
#     full_commit_path = os.path.join(project_root, commit_file)
#     os.makedirs(os.path.dirname(full_commit_path), exist_ok=True)

#     new_commit = check_git_update(full_commit_path)
#     if new_commit:
#         update_and_restart(new_commit, full_commit_path)


# def check_git_update(commit_file):
#     try:
#         subprocess.run(["git", "fetch"], check=True)
#         new_commit = subprocess.check_output(["git", "rev-parse", "origin/main"], text=True).strip()

#         if not os.path.exists(commit_file):
#             with open(commit_file, "w") as f:
#                 f.write(new_commit)
#             logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {commit_file}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: {new_commit}")
#             return None

#         with open(commit_file, "r") as f:
#             last_commit = f.read().strip()

#         if new_commit != last_commit:
#             logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new_commit}")
#             return new_commit
#         else:
#             logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
#             return None

#     except Exception as e:
#         logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Git:")
#         return None

# def update_and_restart(new_commit, commit_file):
#     try:
#         subprocess.run(["git", "pull", "origin", "main"], check=True)

#         with open(commit_file, "w") as f:
#             f.write(new_commit)

#         logger.info("‚ôªÔ∏è –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
#         os.execv(sys.executable, [sys.executable] + sys.argv)

#     except Exception as e:
#         logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:")
